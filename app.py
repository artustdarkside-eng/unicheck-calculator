"""
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ç—Ñ—Ñ–µ–∫—Ç–∞ UniCheck".

–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–π–º–∞ —Å UniCheck –ø—Ä–æ—Ç–∏–≤ —Ä—É—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å —Ä–∞—Å—á—ë—Ç–æ–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞.
"""

import streamlit as st
import pandas as pd
import io
import json
import os
from typing import Dict, Any
from urllib.parse import urlencode
import plotly.express as px
import plotly.graph_objects as go

from calc import calculate_economics, calculate_single_check_economics
from formatters import fmt_money, fmt_percent, fmt_roi, fmt_days, fmt_number
from presets import get_preset, PRESETS


# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø STREAMLIT ===
st.set_page_config(
    page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ç—Ñ—Ñ–µ–∫—Ç–∞ UniCheck",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
)

# –°–∫—Ä—ã—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –º–µ–Ω—é –∏ —Ñ—É—Ç–µ—Ä
st.markdown("""
    <style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    .main {
        padding-top: 2rem;
    }
    </style>
""", unsafe_allow_html=True)


# === –§–£–ù–ö–¶–ò–ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ===

def get_query_params() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL query string."""
    params = st.query_params
    result = {}
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
    if params:
        for key, value in params.items():
            if isinstance(value, list):
                value = value[0]
            
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ int
            try:
                result[key] = int(value)
            except (ValueError, TypeError):
                # –ü—Ä–æ–±—É–µ–º –≤ float
                try:
                    result[key] = float(value)
                except (ValueError, TypeError):
                    # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
                    if value.lower() in ('true', 'false'):
                        result[key] = value.lower() == 'true'
                    else:
                        result[key] = value
    
    return result


def update_query_params(params: Dict[str, Any]) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å URL query string."""
    # –§–∏–ª—å—Ç—Ä—É–µ–º None –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    filtered = {k: v for k, v in params.items() if v is not None}
    st.query_params.update(filtered)


def create_csv_export(params: Dict[str, Any], results: Dict[str, Any]) -> bytes:
    """–°–æ–∑–¥–∞—Ç—å CSV —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á—ë—Ç–∞."""
    rows = []
    
    # –†–∞–∑–¥–µ–ª: –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    rows.append(['–í–•–û–î–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´', ''])
    rows.append(['', ''])
    rows.append(['A. –ü–ª–∞–Ω –∏ –æ–±—ä—ë–º—ã', ''])
    rows.append(['–ü–ª–∞–Ω –Ω–∞–π–º–æ–≤ –≤ –º–µ—Å—è—Ü', params['hires_per_month']])
    rows.append(['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ 1 –Ω–∞–π–º', params['checks_per_hire']])
    rows.append(['', ''])
    
    rows.append(['B. –ß–∞—Å—ã –∏ —Å—Ç–∞–≤–∫–∏', ''])
    rows.append(['–°—Ç–∞–≤–∫–∞ –∏–Ω–∂–µ–Ω–µ—Ä–∞, ‚ÇΩ/—á–∞—Å', params['eng_hourly']])
    rows.append(['–°—Ç–∞–≤–∫–∞ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞, ‚ÇΩ/—á–∞—Å', params['rec_hourly']])
    rows.append(['–ß–∞—Å—ã –∏–Ω–∂–µ–Ω–µ—Ä–∞ –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (—Ä—É—á–Ω–æ–π)', params['eng_hours_per_cand_manual']])
    rows.append(['–ß–∞—Å—ã —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (—Ä—É—á–Ω–æ–π)', params['rec_hours_per_cand_manual']])
    rows.append(['–ß–∞—Å—ã –∏–Ω–∂–µ–Ω–µ—Ä–∞ –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (UniCheck)', params['eng_hours_per_cand_unicheck']])
    rows.append(['–ß–∞—Å—ã —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (UniCheck)', params['rec_hours_per_cand_unicheck']])
    rows.append(['', ''])
    
    rows.append(['C. –°—Ä–æ–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞', ''])
    rows.append(['–î–Ω–µ–π –¥–æ —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∞ (—Ä—É—á–Ω–æ–π)', params['time_to_test_start_manual_days']])
    rows.append(['–î–Ω–µ–π –¥–æ —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∞ (UniCheck)', params['time_to_test_start_unicheck_days']])
    rows.append(['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ (—Ä—É—á–Ω–æ–π)', params['time_to_test_finish_manual_days']])
    rows.append(['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ (UniCheck)', params['time_to_test_finish_unicheck_days']])
    rows.append(['–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏, ‚ÇΩ/–¥–µ–Ω—å', params['vacancy_cost_per_day']])
    rows.append(['', ''])
    
    rows.append(['D. –¢–æ—á–Ω–æ—Å—Ç—å', ''])
    rows.append(['–î–æ–ª—è –æ—à–∏–±–æ—á–Ω—ã—Ö –Ω–∞–π–º–æ–≤ (—Ä—É—á–Ω–æ–π), %', params['bad_hire_rate_manual_pct']])
    rows.append(['–î–æ–ª—è –æ—à–∏–±–æ—á–Ω—ã—Ö –Ω–∞–π–º–æ–≤ (UniCheck), %', params['bad_hire_rate_unicheck_pct']])
    rows.append(['–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—à–∏–±–æ—á–Ω–æ–≥–æ –Ω–∞–π–º–∞, ‚ÇΩ', params['cost_bad_hire']])
    rows.append(['', ''])
    
    rows.append(['E. –°—Ç–æ–∏–º–æ—Å—Ç—å UniCheck', ''])
    rows.append(['–¶–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏, ‚ÇΩ', params['price_per_check']])
    rows.append(['', ''])
    
    rows.append(['F. NPS', ''])
    rows.append(['NPS (—Ä—É—á–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å)', params['nps_manual']])
    rows.append(['NPS (UniCheck)', params['nps_unicheck']])
    rows.append(['', ''])
    
    # –†–∞–∑–¥–µ–ª: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–æ–≤
    rows.append(['–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–Å–¢–û–í', ''])
    rows.append(['', ''])
    rows.append(['–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏', ''])
    rows.append(['–í–∞–ª–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è, ‚ÇΩ', results['gross_savings']])
    rows.append(['–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, ‚ÇΩ', results['platform_cost']])
    rows.append(['Net-—ç–∫–æ–Ω–æ–º–∏—è, ‚ÇΩ', results['net_savings']])
    rows.append(['ROI', results['roi'] if results['roi'] else 'N/A'])
    rows.append(['–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ Time-to-Hire, –¥–Ω–µ–π', results['delta_tth_days']])
    rows.append(['–£–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏, –ø.–ø.', results['delta_accuracy_pp']])
    rows.append(['', ''])
    
    rows.append(['–†–∞–∑–±–∏–≤–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∏', ''])
    rows.append(['–≠–∫–æ–Ω–æ–º–∏—è —á–µ–ª–æ–≤–µ–∫–æ-—á–∞—Å–æ–≤, ‚ÇΩ', results['labor_savings']])
    rows.append(['–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è, ‚ÇΩ', results['speed_savings']])
    rows.append(['–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏, ‚ÇΩ', results['accuracy_savings']])
    rows.append(['–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç FP/FN, ‚ÇΩ', results['fpfn_value']])
    rows.append(['–≠—Ñ—Ñ–µ–∫—Ç NPS, ‚ÇΩ', results['nps_value']])
    rows.append(['', ''])
    
    rows.append(['–ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞', ''])
    rows.append(['–í–∞–ª–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, ‚ÇΩ', results['gross_per_candidate']])
    rows.append(['–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, ‚ÇΩ', results['platform_per_candidate']])
    rows.append(['Net –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, ‚ÇΩ', results['net_per_candidate']])
    rows.append(['', ''])
    
    rows.append(['–ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –Ω–∞–π–º', ''])
    rows.append(['–í–∞–ª–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è –Ω–∞ –Ω–∞–π–º, ‚ÇΩ', results['gross_per_hire']])
    rows.append(['–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–∞ –Ω–∞–π–º, ‚ÇΩ', results['platform_per_hire']])
    rows.append(['Net –Ω–∞ –Ω–∞–π–º, ‚ÇΩ', results['net_per_hire']])
    
    df = pd.DataFrame(rows, columns=['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ'])
    
    buffer = io.StringIO()
    df.to_csv(buffer, index=False, sep=';', encoding='utf-8-sig')
    return buffer.getvalue().encode('utf-8-sig')


def create_comparison_table(params: Dict[str, Any], results: Dict[str, Any]) -> pd.DataFrame:
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è UniCheck vs –†—É—á–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å."""
    
    total_checks = results['total_checks']
    candidates_unicheck = results['candidates_unicheck']
    
    data = {
        '–ú–µ—Ç—Ä–∏–∫–∞': [
            '–ü—Ä–æ–≤–µ—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
            '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏, ‚ÇΩ',
            '–ß–∞—Å—ã –∏–Ω–∂–µ–Ω–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É',
            '–ß–∞—Å—ã —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É',
            'Time-to-Hire, –¥–Ω–µ–π',
            '–î–æ–ª—è –æ—à–∏–±–æ—á–Ω—ã—Ö –Ω–∞–π–º–æ–≤, %',
        ],
        '–†—É—á–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å': [
            f"{total_checks:,}",
            f"{results['manual_cost_per_check']:,.0f}",
            f"{params['eng_hours_per_cand_manual']:.1f}",
            f"{params['rec_hours_per_cand_manual']:.1f}",
            f"{results['tth_manual_days']}",
            f"{params['bad_hire_rate_manual_pct']}",
        ],
        'UniCheck': [
            f"{candidates_unicheck:,}",
            f"{results['unicheck_cost_per_check'] + params['price_per_check']:,.0f}",
            f"{params['eng_hours_per_cand_unicheck']:.1f}",
            f"{params['rec_hours_per_cand_unicheck']:.1f}",
            f"{results['tth_unicheck_days']}",
            f"{params['bad_hire_rate_unicheck_pct']}",
        ],
    }
    
    return pd.DataFrame(data)


# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–°–°–ò–ò ===

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ session_state –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if "params" not in st.session_state:
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–µ—Å–µ—Ç
    st.session_state.params = get_preset('default')
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å query params - –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
    query_params = get_query_params()
    if query_params:
        st.session_state.params.update(query_params)


# === SIDEBAR: –ü–ê–†–ê–ú–ï–¢–†–´ ===

st.sidebar.title("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")

with st.sidebar:
    # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if st.button("‚ôªÔ∏è –°–±—Ä–æ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", use_container_width=True):
        st.session_state.params = get_preset('default')
        st.rerun()
    
    st.divider()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
    import os
    import json
    
    presets_dir = "saved_presets"
    saved_presets = []
    
    if os.path.exists(presets_dir):
        saved_presets = [f[:-5] for f in os.listdir(presets_dir) if f.endswith('.json')]
        saved_presets.sort()
    
    if saved_presets:
        st.markdown("**üìÇ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã**")
        
        def load_preset_callback():
            """Callback –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Å–µ—Ç–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑ selectbox."""
            selected = st.session_state.get("load_preset_select", "")
            if selected:
                preset_file = os.path.join(presets_dir, f"{selected}.json")
                try:
                    with open(preset_file, 'r', encoding='utf-8') as f:
                        loaded_preset = json.load(f)
                        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏
                        st.session_state.params = loaded_preset
                        st.session_state.preset_loaded = True
                        st.success(f"‚úÖ –ü—Ä–µ—Å–µ—Ç '{selected}' –∑–∞–≥—Ä—É–∂–µ–Ω!")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        
        st.selectbox(
            "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ—Å–µ—Ç",
            options=[""] + saved_presets,
            label_visibility="collapsed",
            key="load_preset_select",
            on_change=load_preset_callback
        )
        
        st.divider()
    
    # A. –ü–õ–ê–ù –ò –û–ë–™–Å–ú–´
    st.subheader("A. –ü–ª–∞–Ω –∏ –æ–±—ä—ë–º—ã")
    
    params = st.session_state.params
    
    params['hires_per_month'] = st.number_input(
        "–ü–ª–∞–Ω –Ω–∞–π–º–æ–≤ –≤ –º–µ—Å—è—Ü",
        min_value=1,
        max_value=500,
        value=params.get('hires_per_month', 20),
        step=1,
        help="–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤ –º–µ—Å—è—Ü –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –Ω–∞–Ω—è—Ç—å"
    )
    
    params['checks_per_hire'] = st.number_input(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ 1 –Ω–∞–π–º",
        min_value=1,
        max_value=20,
        value=params.get('checks_per_hire', 2),
        step=1,
        help="–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –Ω–∞–π–º–∞"
    )
    
    # B. –ß–ê–°–´ –ò –°–¢–ê–í–ö–ò
    st.subheader("B. –ß–∞—Å—ã –∏ —Å—Ç–∞–≤–∫–∏")
    
    params['eng_hourly'] = st.number_input(
        "–°—Ç–∞–≤–∫–∞ –∏–Ω–∂–µ–Ω–µ—Ä–∞, ‚ÇΩ/—á–∞—Å",
        min_value=500,
        max_value=50000,
        value=params.get('eng_hourly', 4000),
        step=500,
        help="–ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –∏–Ω–∂–µ–Ω–µ—Ä–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"
    )
    
    params['rec_hourly'] = st.number_input(
        "–°—Ç–∞–≤–∫–∞ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞, ‚ÇΩ/—á–∞—Å",
        min_value=500,
        max_value=20000,
        value=params.get('rec_hourly', 1500),
        step=100,
        help="–ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞"
    )
    
    col1, col2 = st.columns(2)
    with col1:
        params['eng_hours_per_cand_manual'] = st.number_input(
            "–ß–∞—Å—ã –∏–Ω–∂–µ–Ω–µ—Ä–∞ –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (—Ä—É—á–Ω–æ–π)",
            min_value=0.0,
            max_value=50.0,
            value=float(params.get('eng_hours_per_cand_manual', 1.0)),
            step=0.1,
            format="%.1f"
        )
        params['eng_hours_per_cand_unicheck'] = st.number_input(
            "–ß–∞—Å—ã –∏–Ω–∂–µ–Ω–µ—Ä–∞ (UniCheck)",
            min_value=0.0,
            max_value=50.0,
            value=float(params.get('eng_hours_per_cand_unicheck', 0.2)),
            step=0.1,
            format="%.1f"
        )
    
    with col2:
        params['rec_hours_per_cand_manual'] = st.number_input(
            "–ß–∞—Å—ã —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ –Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (—Ä—É—á–Ω–æ–π)",
            min_value=0.0,
            max_value=50.0,
            value=float(params.get('rec_hours_per_cand_manual', 0.5)),
            step=0.1,
            format="%.1f"
        )
        params['rec_hours_per_cand_unicheck'] = st.number_input(
            "–ß–∞—Å—ã —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ (UniCheck)",
            min_value=0.0,
            max_value=50.0,
            value=float(params.get('rec_hours_per_cand_unicheck', 0.2)),
            step=0.1,
            format="%.1f"
        )
    
    # C. –°–†–û–ö–ò –ü–†–û–¶–ï–°–°–ê
    st.subheader("C. –°—Ä–æ–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞")
    
    col1, col2 = st.columns(2)
    with col1:
        st.write("**–†—É—á–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å**")
        params['time_to_test_start_manual_days'] = st.number_input(
            "–î–Ω–µ–π –¥–æ —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∞",
            min_value=1,
            max_value=30,
            value=params.get('time_to_test_start_manual_days', 3),
            key="manual_start"
        )
        params['time_to_test_finish_manual_days'] = st.number_input(
            "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞, —á–∞—Å–æ–≤",
            min_value=1,
            max_value=240,
            value=params.get('time_to_test_finish_manual_days', 48),
            key="manual_finish",
            help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —á–∞—Å–∞—Ö (8 —á–∞—Å–æ–≤ = 1 –¥–µ–Ω—å)"
        )
    
    with col2:
        st.write("**UniCheck**")
        params['time_to_test_start_unicheck_days'] = st.number_input(
            "–î–Ω–µ–π –¥–æ —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∞",
            min_value=0,
            max_value=30,
            value=params.get('time_to_test_start_unicheck_days', 1),
            key="uni_start"
        )
        params['time_to_test_finish_unicheck_days'] = st.number_input(
            "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞, —á–∞—Å–æ–≤",
            min_value=0,
            max_value=240,
            value=params.get('time_to_test_finish_unicheck_days', 8),
            key="uni_finish",
            help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —á–∞—Å–∞—Ö (8 —á–∞—Å–æ–≤ = 1 –¥–µ–Ω—å)"
        )
    
    params['vacancy_cost_per_day'] = st.number_input(
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏, ‚ÇΩ/–¥–µ–Ω—å",
        min_value=1000,
        max_value=500000,
        value=params.get('vacancy_cost_per_day', 15000),
        step=1000,
        help="–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ (—É–ø—É—â–µ–Ω–Ω–∞—è –≤—ã—Ä—É—á–∫–∞, –ø–æ—Ç–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)"
    )
    
    # D. –¢–û–ß–ù–û–°–¢–¨
    st.subheader("D. –¢–æ—á–Ω–æ—Å—Ç—å –∏ –æ—à–∏–±–∫–∏")
    
    params['bad_hire_rate_manual_pct'] = st.number_input(
        "–û—à–∏–±–æ—á–Ω—ã–µ –Ω–∞–π–º—ã (—Ä—É—á–Ω–æ–π), %",
        min_value=0,
        max_value=50,
        value=params.get('bad_hire_rate_manual_pct', 10),
        help="–î–æ–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –Ω–∞–π–º–æ–≤ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ",
        key="bad_hire_manual"
    )
    st.session_state.params['bad_hire_rate_manual_pct'] = params['bad_hire_rate_manual_pct']
    
    params['bad_hire_rate_unicheck_pct'] = st.number_input(
        "–û—à–∏–±–æ—á–Ω—ã–µ –Ω–∞–π–º—ã (UniCheck), %",
        min_value=0,
        max_value=50,
        value=params.get('bad_hire_rate_unicheck_pct', 7),
        help="–î–æ–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –Ω–∞–π–º–æ–≤ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ UniCheck",
        key="bad_hire_unicheck"
    )
    st.session_state.params['bad_hire_rate_unicheck_pct'] = params['bad_hire_rate_unicheck_pct']
    
    params['cost_bad_hire'] = st.number_input(
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—à–∏–±–æ—á–Ω–æ–≥–æ –Ω–∞–π–º–∞, ‚ÇΩ",
        min_value=100000,
        max_value=10000000,
        value=params.get('cost_bad_hire', 1500000),
        step=100000,
        help="–ö–æ–º–±–æ: –∑–∞—Ä–ø–ª–∞—Ç–∞ –∏—Å–ø—ã—Ç. —Å—Ä–æ–∫–∞, –æ–Ω–±–æ—Ä–¥–∏–Ω–≥, —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ, —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥, —É—â–µ—Ä–±",
        key="cost_bad_hire"
    )
    st.session_state.params['cost_bad_hire'] = params['cost_bad_hire']
    
    # FP/FN –º–æ–¥–µ–ª—å
    st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Ç–æ—á–Ω–æ—Å—Ç–∏ (FP/FN)")
    
    use_fpfn = st.checkbox(
        "üî¨ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FP/FN –∞–Ω–∞–ª–∏–∑",
        value=st.session_state.params.get('use_fpfn_model', False),
        help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ª–æ–∂–Ω—ã–µ –æ—Ç–∫–∞–∑—ã –∏ –ª–æ–∂–Ω—ã–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω–∞ —ç—Ç–∞–ø–µ —Ç–µ—Ö—Å–∫—Ä–∏–Ω–∞"
    )
    params['use_fpfn_model'] = use_fpfn
    st.session_state.params['use_fpfn_model'] = use_fpfn
    
    if use_fpfn:
        params['good_candidates_share'] = st.number_input(
            "–î–æ–ª—è —Ä–µ–∞–ª—å–Ω–æ —Å–∏–ª—å–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, %",
            min_value=10,
            max_value=80,
            value=params.get('good_candidates_share', 30),
            key="good_candidates_share"
        )
        st.session_state.params['good_candidates_share'] = params['good_candidates_share']
        
        col1, col2 = st.columns(2)
        with col1:
            st.write("**–†—É—á–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å**")
            params['fp_rate_manual_pct'] = st.number_input(
                "–õ–æ–∂–Ω—ã–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è (FP), %",
                min_value=0,
                max_value=50,
                value=params.get('fp_rate_manual_pct', 12),
                key="manual_fp"
            )
            st.session_state.params['fp_rate_manual_pct'] = params['fp_rate_manual_pct']
            
            params['fn_rate_manual_pct'] = st.number_input(
                "–õ–æ–∂–Ω—ã–µ –æ—Ç–∫–∞–∑—ã (FN), %",
                min_value=0,
                max_value=50,
                value=params.get('fn_rate_manual_pct', 15),
                key="manual_fn"
            )
            st.session_state.params['fn_rate_manual_pct'] = params['fn_rate_manual_pct']
        
        with col2:
            st.write("**UniCheck**")
            params['fp_rate_unicheck_pct'] = st.number_input(
                "–õ–æ–∂–Ω—ã–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è (FP), %",
                min_value=0,
                max_value=50,
                value=params.get('fp_rate_unicheck_pct', 8),
                key="uni_fp"
            )
            st.session_state.params['fp_rate_unicheck_pct'] = params['fp_rate_unicheck_pct']
            
            params['fn_rate_unicheck_pct'] = st.number_input(
                "–õ–æ–∂–Ω—ã–µ –æ—Ç–∫–∞–∑—ã (FN), %",
                min_value=0,
                max_value=50,
                value=params.get('fn_rate_unicheck_pct', 10),
                key="uni_fn"
            )
            st.session_state.params['fn_rate_unicheck_pct'] = params['fn_rate_unicheck_pct']
        
        # –¶–µ–Ω—ã –¥–ª—è FP –∏ FN
        st.write("**–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—à–∏–±–æ–∫ —Ç–µ—Ö—Å–∫—Ä–∏–Ω–∞**")
        col_prices = st.columns(2)
        with col_prices[0]:
            params['cost_fp'] = st.number_input(
                "–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–∂–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è (FP), ‚ÇΩ",
                min_value=50000,
                max_value=5000000,
                value=params.get('cost_fp', 300000),
                step=50000,
                help="–¶–µ–Ω–∞ –∑–∞ –ø—Ä–∏—ë–º —Å–ª–∞–±–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞",
                key="cost_fp"
            )
            st.session_state.params['cost_fp'] = params['cost_fp']
        
        with col_prices[1]:
            params['cost_fn'] = st.number_input(
                "–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–∂–Ω–æ–≥–æ –æ—Ç–∫–∞–∑–∞ (FN), ‚ÇΩ",
                min_value=50000,
                max_value=5000000,
                value=params.get('cost_fn', 150000),
                step=50000,
                help="–¶–µ–Ω–∞ –∑–∞ –æ—Ç–∫–∞–∑ —Ö–æ—Ä–æ—à–µ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É (—É–ø—É—â–µ–Ω–Ω–∞—è –≤—ã–≥–æ–¥–∞)",
                key="cost_fn"
            )
            st.session_state.params['cost_fn'] = params['cost_fn']
    else:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç—ã, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å
        for key in ['good_candidates_share', 'fp_rate_manual_pct', 'fn_rate_manual_pct',
                    'fp_rate_unicheck_pct', 'fn_rate_unicheck_pct', 'cost_fp', 'cost_fn']:
            if key not in params:
                params[key] = get_preset('default').get(key, 0)
    
    # E. –°–¢–û–ò–ú–û–°–¢–¨ UNICHECK
    st.subheader("E. –°—Ç–æ–∏–º–æ—Å—Ç—å UniCheck")
    
    params['price_per_check'] = st.number_input(
        "–¶–µ–Ω–∞ –æ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, ‚ÇΩ",
        min_value=0,
        max_value=10000,
        value=params.get('price_per_check', 1500),
        step=100
    )
    
    # F. NPS
    st.subheader("F. NPS –ø—Ä–æ—Ü–µ—Å—Å–∞")
    
    col1, col2 = st.columns(2)
    with col1:
        params['nps_manual'] = st.number_input(
            "NPS (—Ä—É—á–Ω–æ–π)",
            min_value=-100,
            max_value=100,
            value=params.get('nps_manual', 10)
        )
    with col2:
        params['nps_unicheck'] = st.number_input(
            "NPS (UniCheck)",
            min_value=-100,
            max_value=100,
            value=params.get('nps_unicheck', 40)
        )
    
    use_nps_money = st.checkbox(
        "üí∞ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å ŒîNPS –≤ –¥–µ–Ω—å–≥–∏",
        value=st.session_state.params.get('use_nps_money', False),
        help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, —Ä–∞–∑–Ω–∏—Ü–∞ NPS –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –¥–µ–Ω–µ–∂–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç"
    )
    params['use_nps_money'] = use_nps_money
    st.session_state.params['use_nps_money'] = use_nps_money
    
    if use_nps_money:
        params['nps_to_value_coef'] = st.number_input(
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ Œî NPS ‚Üí ‚ÇΩ/–Ω–∞–π–º",
            min_value=0.0,
            max_value=100000.0,
            value=float(params.get('nps_to_value_coef', 0.0)),
            step=1000.0,
            format="%.0f"
        )
    else:
        params['nps_to_value_coef'] = 0.0
    
    st.session_state.params['nps_to_value_coef'] = params['nps_to_value_coef']


# === –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢ ===

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ç—Ñ—Ñ–µ–∫—Ç–∞ UniCheck")
st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–π–º–∞ —Å UniCheck vs —Ä—É—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º params –≤ session_state
st.session_state.params.update(params)

# –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á—ë—Ç
results = calculate_economics(**params)

# === –°–û–ó–î–ê–Å–ú –í–ö–õ–ê–î–ö–ò ===

tab_main = st.container()

# === –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢ ===
st.subheader("üìà –ì–æ–¥–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è UniCheck")

# –ì–ª–∞–≤–Ω—ã–µ 5 –º–µ—Ç—Ä–∏–∫
key_cols = st.columns(5)

with key_cols[0]:
    st.metric(
        "üßë‚Äçüíº –≠–∫–æ–Ω–æ–º–∏—è —á–µ–ª–æ–≤–µ–∫–æ-—á–∞—Å–æ–≤",
        fmt_money(results['labor_savings'])
    )

with key_cols[1]:
    st.metric(
        "‚ö° –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è",
        fmt_money(results['speed_savings']),
        delta=f"TTH: -{results['delta_tth_days_yearly']:.0f} –¥–Ω–µ–π/–≥–æ–¥"
    )

with key_cols[2]:
    # –°—É–º–º–∞—Ä–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è –æ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏: –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å + FP/FN (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
    total_accuracy_savings = results['accuracy_savings'] + results['fpfn_value']
    delta_accuracy = None
    if params['use_fpfn_model']:
        delta_accuracy = f"–ù–µ –Ω–∞–Ω—è—Ç–æ —Å–ª–∞–±—ã—Ö: {results['bad_hired_avoided_yearly']:.0f} | –ù–µ –æ—Ç—Å–µ—è–Ω–æ —Å–∏–ª—å–Ω—ã—Ö: {results['good_rejected_avoided_yearly']:.0f}"
    st.metric(
        "‚úÖ –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏",
        fmt_money(total_accuracy_savings),
        delta=delta_accuracy
    )

with key_cols[3]:
    st.metric(
        "üåü NPS —ç—Ñ—Ñ–µ–∫—Ç",
        fmt_money(results['nps_value']),
        delta=f"ŒîNPS = {results['delta_nps']}"
    )

with key_cols[4]:
    st.metric(
        "üíé –ò—Ç–æ–≥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è",
        fmt_money(results['net_savings']),
        delta=f"ROI: {fmt_roi(results['roi'])} | –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: {results['payback_months']:.1f} –º–µ—Å." if results['payback_months'] else "ROI: N/A"
    )

st.divider()

# –í–∏–∑—É–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏–∏
st.markdown("### üìä –ò–∑ —á–µ–≥–æ —Å–æ—Å—Ç–æ–∏—Ç –≤–∞–ª–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è")

# –°—É–º–º–∞—Ä–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è –æ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏: –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å + FP/FN (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
total_accuracy_savings = results['accuracy_savings'] + results['fpfn_value']

pie_data = {
    '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç': ['–ß–µ–ª–æ–≤–µ–∫–æ-—á–∞—Å—ã', '–£—Å–∫–æ—Ä–µ–Ω–∏–µ', '–¢–æ—á–Ω–æ—Å—Ç—å', 'NPS —ç—Ñ—Ñ–µ–∫—Ç'],
    '–ó–Ω–∞—á–µ–Ω–∏–µ': [
        results['labor_savings'],
        results['speed_savings'],
        total_accuracy_savings,
        results['nps_value']
    ]
}

pie_df = pd.DataFrame(pie_data)

fig = px.pie(
    pie_df,
    values='–ó–Ω–∞—á–µ–Ω–∏–µ',
    names='–ö–æ–º–ø–æ–Ω–µ–Ω—Ç',
    title="–°–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ –≤–∞–ª–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∏",
    hole=0.3
)
st.plotly_chart(fig, use_container_width=True)

st.divider()

# –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤ –¥–µ–Ω–µ–∂–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏
st.markdown("### üìã –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É")

# –†–∞—Å—á—ë—Ç –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è)
def calculate_table_data(results, params):
    manual_labor_cost_per_check = results['manual_cost_per_check']
    unicheck_labor_cost_per_check = results['unicheck_cost_per_check'] + params['price_per_check']
    labor_savings_per_check = manual_labor_cost_per_check - unicheck_labor_cost_per_check

    # TtH —ç–∫–æ–Ω–æ–º–∏—è –Ω–∞ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É
    # –ù–∞ –æ–¥–Ω–æ–≥–æ –Ω–∞–π–º–∞: —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ TtH √ó —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –¥–µ–Ω—å
    tth_cost_per_hire_manual = results['tth_manual_days'] * params['vacancy_cost_per_day']
    tth_cost_per_hire_unicheck = results['tth_unicheck_days'] * params['vacancy_cost_per_day']
    # –ù–∞ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É (—Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ –Ω–∞–π–º)
    tth_cost_per_check_manual = tth_cost_per_hire_manual / params['checks_per_hire']
    tth_cost_per_check_unicheck = tth_cost_per_hire_unicheck / params['checks_per_hire']
    tth_savings_per_check = tth_cost_per_check_manual - tth_cost_per_check_unicheck

    # –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É (–±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å + FP/FN –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
    # –ù–∞ –æ–¥–Ω–æ–≥–æ –Ω–∞–π–º–∞: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏ √ó —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—à–∏–±–∫–∏
    accuracy_cost_per_hire_manual = (params['bad_hire_rate_manual_pct'] / 100) * params['cost_bad_hire']
    accuracy_cost_per_hire_unicheck = (params['bad_hire_rate_unicheck_pct'] / 100) * params['cost_bad_hire']
    
    # –î–æ–±–∞–≤–ª—è–µ–º FP/FN –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–∫–ª—é—á–µ–Ω–∞
    if params['use_fpfn_model']:
        # FP/FN —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–∞ –æ–¥–∏–Ω –Ω–∞–π–º (–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç –æ–±—â–µ–π —ç–∫–æ–Ω–æ–º–∏–∏)
        fpfn_cost_per_hire = results['fpfn_value'] / results['total_checks'] * params['checks_per_hire']
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ä—É—á–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É, —Ç–∞–∫ –∫–∞–∫ UniCheck –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç–∏ –æ—à–∏–±–∫–∏
        accuracy_cost_per_hire_manual += fpfn_cost_per_hire
    
    # –ù–∞ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É (—Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ –Ω–∞–π–º)
    accuracy_cost_per_check_manual = accuracy_cost_per_hire_manual / params['checks_per_hire']
    accuracy_cost_per_check_unicheck = accuracy_cost_per_hire_unicheck / params['checks_per_hire']
    accuracy_savings_per_check = accuracy_cost_per_check_manual - accuracy_cost_per_check_unicheck

    total_savings_per_check = labor_savings_per_check + tth_savings_per_check + accuracy_savings_per_check

    # –ò—Ç–æ–≥–æ–≤—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (—Å—É–º–º–∞ —Ç—Ä—É–¥–∞ + TtH + —Ç–æ—á–Ω–æ—Å—Ç—å)
    manual_total_per_check = manual_labor_cost_per_check + tth_cost_per_check_manual + accuracy_cost_per_check_manual
    unicheck_total_per_check = unicheck_labor_cost_per_check + tth_cost_per_check_unicheck + accuracy_cost_per_check_unicheck

    return {
        'labor': (manual_labor_cost_per_check, unicheck_labor_cost_per_check, labor_savings_per_check),
        'tth': (tth_cost_per_check_manual, tth_cost_per_check_unicheck, tth_savings_per_check),
        'accuracy': (accuracy_cost_per_check_manual, accuracy_cost_per_check_unicheck, accuracy_savings_per_check),
        'total': (manual_total_per_check, unicheck_total_per_check, total_savings_per_check)
    }

table_data = calculate_table_data(results, params)

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–æ–ª–±—á–∞—Ç—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º
components_data = {
    '–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ç—Ä—É–¥': table_data['labor'],
    '–ü—Ä–æ—Å—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ (TtH)': table_data['tth'],
    '–û—à–∏–±–æ—á–Ω—ã–π –Ω–∞–π–º': table_data['accuracy'],
    '–ò—Ç–æ–≥–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É': table_data['total']
}

# –°–æ–∑–¥–∞—ë–º 4 –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ —Å–µ—Ç–∫–µ 2x2
cols = st.columns(2)

for idx, (component_name, (manual, unicheck, savings)) in enumerate(components_data.items()):
    with cols[idx % 2]:
        # –†–∞—Å—á—ë—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏
        savings_percent = (savings / (manual + 0.01) * 100)
        
        # –°–æ–∑–¥–∞—ë–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        fig = go.Figure()
        
        fig.add_trace(go.Bar(
            x=['–†—É—á–Ω–æ–π', 'UniCheck', '–≠–∫–æ–Ω–æ–º–∏—è'],
            y=[manual, unicheck, savings],
            text=[fmt_money(manual), fmt_money(unicheck), fmt_money(savings)],
            textposition='auto',
            marker=dict(color=['#FF6B6B', '#4ECDC4', '#45B7D1']),
        ))
        
        fig.update_layout(
            title=f"{component_name}<br><sub>–≠–∫–æ–Ω–æ–º–∏—è: {savings_percent:.1f}%</sub>",
            xaxis_title='',
            yaxis_title='–°—Ç–æ–∏–º–æ—Å—Ç—å, ‚ÇΩ',
            height=350,
            showlegend=False,
            template='plotly_white',
            hovermode='x'
        )
        
        st.plotly_chart(fig, use_container_width=True)

# –¢–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —ç–∫–æ–Ω–æ–º–∏–∏
st.markdown("**–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —ç–∫–æ–Ω–æ–º–∏–∏:**")
summary_table_data = {
    '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç': [
        '–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ç—Ä—É–¥',
        '–ü—Ä–æ—Å—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ (TtH)',
        '–û—à–∏–±–æ—á–Ω—ã–π –Ω–∞–π–º (—Ç–æ—á–Ω–æ—Å—Ç—å)',
        '–ò—Ç–æ–≥–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'
    ],
    '–†—É—á–Ω–æ–π, ‚ÇΩ': [
        fmt_money(table_data['labor'][0]),
        fmt_money(table_data['tth'][0]),
        fmt_money(table_data['accuracy'][0]),
        fmt_money(table_data['total'][0])
    ],
    'UniCheck, ‚ÇΩ': [
        fmt_money(table_data['labor'][1]),
        fmt_money(table_data['tth'][1]),
        fmt_money(table_data['accuracy'][1]),
        fmt_money(table_data['total'][1])
    ],
    '–≠–∫–æ–Ω–æ–º–∏—è, ‚ÇΩ': [
        fmt_money(table_data['labor'][2]),
        fmt_money(table_data['tth'][2]),
        fmt_money(table_data['accuracy'][2]),
        fmt_money(table_data['total'][2])
    ],
    '–≠–∫–æ–Ω–æ–º–∏—è, %': [
        f"{(table_data['labor'][2] / (table_data['labor'][0] + 0.01) * 100):.1f}%",
        f"{(table_data['tth'][2] / (table_data['tth'][0] + 0.01) * 100):.1f}%",
        f"{(table_data['accuracy'][2] / (table_data['accuracy'][0] + 0.01) * 100):.1f}%",
        f"{(table_data['total'][2] / (table_data['total'][0] + 0.01) * 100):.1f}%"
    ],
}

summary_df = pd.DataFrame(summary_table_data)
st.dataframe(summary_df, use_container_width=True, hide_index=True)




# === –î–ò–°–ö–õ–ï–ô–ú–ï–† ===

st.caption(
    "‚ö†Ô∏è **–î–∏—Å–∫–ª–µ–π–º–µ—Ä:** –ú–æ–¥–µ–ª—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –∏ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. "
    "–í—Å–µ —Ä–∞—Å—á—ë—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è "
    "–Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏."
)
