#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏ UniCheck.
–ó–∞–ø—É—Å–∫: python analyze.py
"""

import sys
import os

# –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from calc import calculate_economics
    from presets import default, bank, retail, smb
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ –µ—Å—Ç—å calc.py –∏ presets.py")
    sys.exit(1)

def analyze():
    """–í—ã–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏."""
    print("\n" + "=" * 80)
    print("–ê–ù–ê–õ–ò–ó –ú–û–î–ï–õ–ò –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê UNICHECK")
    print("=" * 80 + "\n")
    
    for name, preset_func in [
        ("üìò DEFAULT", default),
        ("üè¶ BANK", bank),
        ("üõçÔ∏è RETAIL", retail),
        ("üíº SMB", smb),
    ]:
        try:
            params = preset_func()
            results = calculate_economics(**params)
            
            hires_year = params['hires_per_month'] * 12
            checks_year = hires_year * params['checks_per_hire']
            tth_reduction = (params['time_to_test_start_manual_days'] + 
                            params['time_to_test_finish_manual_days']) - \
                           (params['time_to_test_start_unicheck_days'] + 
                            params['time_to_test_finish_unicheck_days'])
            
            gross = results['gross_savings']
            
            print(f"{name}")
            print("-" * 80)
            print(f"  –ù–∞–π–º–æ–≤/–≥–æ–¥: {hires_year:,} | –ü—Ä–æ–≤–µ—Ä–æ–∫/–≥–æ–¥: {checks_year:,}")
            print(f"  –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏: {params['vacancy_cost_per_day']:,} ‚ÇΩ/–¥–µ–Ω—å | TtH —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ: {tth_reduction} –¥–Ω–µ–π")
            print(f"  –£–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏: {params['bad_hire_rate_manual_pct']}% ‚Üí {params['bad_hire_rate_unicheck_pct']}% | –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—à–∏–±–∫–∏: {params['cost_bad_hire']:,} ‚ÇΩ")
            print()
            
            print(f"  üí∞ –í–∞–ª–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {gross:,.0f} ‚ÇΩ")
            print(f"     ‚îî‚îÄ –¢—Ä—É–¥: {results['labor_savings']:,.0f} ‚ÇΩ ({results['labor_savings']/gross*100:.1f}%)")
            print(f"     ‚îî‚îÄ –°–∫–æ—Ä–æ—Å—Ç—å: {results['speed_savings']:,.0f} ‚ÇΩ ({results['speed_savings']/gross*100:.1f}%)")
            print(f"     ‚îî‚îÄ –¢–æ—á–Ω–æ—Å—Ç—å: {results['accuracy_savings']:,.0f} ‚ÇΩ ({results['accuracy_savings']/gross*100:.1f}%)")
            print()
            
            payback_months = (results['platform_cost'] / gross * 12) if gross > 0 else float('inf')
            
            print(f"  üìä –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {results['platform_cost']:,.0f} ‚ÇΩ")
            print(f"  ‚úÖ Net-—ç–∫–æ–Ω–æ–º–∏—è: {results['net_savings']:,.0f} ‚ÇΩ")
            print(f"  üöÄ ROI: {results['roi']:.2f}x")
            print(f"  ‚è±Ô∏è  –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: {payback_months:.1f} –º–µ—Å—è—Ü–µ–≤")
            print("\n")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {name}: {e}\n")

if __name__ == '__main__':
    analyze()
