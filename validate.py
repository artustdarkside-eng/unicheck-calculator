#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏.
–ë—ã—Å—Ç—Ä—ã–π –∞–ª–∏–∞—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞—Å—á—ë—Ç–æ–≤.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python validate.py              # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
    python validate.py --detailed   # –° –ø–æ–¥—Ä–æ–±–Ω—ã–º —Ä–∞–∑–±–æ—Ä–æ–º —Ñ–æ—Ä–º—É–ª
    python validate.py --sensitivity # –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import sys
from calc import calculate_economics
from presets import default, bank, retail, smb


def print_header(text):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
    print("\n" + "=" * 80)
    print(f"  {text}")
    print("=" * 80)


def print_subheader(text):
    """–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫."""
    print(f"\n  üìã {text}")
    print("  " + "-" * 76)


def analyze_preset(name, preset_func):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞."""
    params = preset_func()
    results = calculate_economics(**params)
    
    hires_year = params['hires_per_month'] * 12
    checks_year = hires_year * params['checks_per_hire']
    
    gross = results['gross_savings']
    labor = results['labor_savings']
    speed = results['speed_savings']
    accuracy = results['accuracy_savings']
    platform = results['platform_cost']
    net = results['net_savings']
    roi = results['roi']
    
    # –†–∞—Å—á—ë—Ç –ø–µ—Ä–∏–æ–¥–∞ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ (–≤ –º–µ—Å—è—Ü–∞—Ö)
    payback_months = (platform / gross * 12) if gross > 0 else float('inf')
    
    print(f"\n  {name.upper()}")
    print(f"    –ù–∞–π–º–æ–≤/–≥–æ–¥: {hires_year:,} | –ü—Ä–æ–≤–µ—Ä–æ–∫/–≥–æ–¥: {checks_year:,}")
    print(f"    –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏: {params['vacancy_cost_per_day']:,} ‚ÇΩ/–¥–µ–Ω—å | TtH -: {params['time_to_test_start_manual_days'] + params['time_to_test_finish_manual_days'] - params['time_to_test_start_unicheck_days'] - params['time_to_test_finish_unicheck_days']} –¥–Ω–µ–π")
    print(f"    Bad hire: {params['bad_hire_rate_manual_pct']}% ‚Üí {params['bad_hire_rate_unicheck_pct']}% | Cost: {params['cost_bad_hire']:,} ‚ÇΩ")
    
    print(f"\n    üí∞ –í–ê–õ–û–í–ê–Ø –≠–ö–û–ù–û–ú–ò–Ø: {gross:,.0f} ‚ÇΩ")
    print(f"       ‚îú‚îÄ –¢—Ä—É–¥: {labor:,.0f} ‚ÇΩ ({labor/gross*100:.1f}%)")
    print(f"       ‚îú‚îÄ –°–∫–æ—Ä–æ—Å—Ç—å: {speed:,.0f} ‚ÇΩ ({speed/gross*100:.1f}%)")
    print(f"       ‚îî‚îÄ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:,.0f} ‚ÇΩ ({accuracy/gross*100:.1f}%)")
    
    print(f"\n    üìä –ü–õ–ê–¢–§–û–†–ú–ê: {platform:,.0f} ‚ÇΩ")
    print(f"    ‚úÖ NET-–≠–ö–û–ù–û–ú–ò–Ø: {net:,.0f} ‚ÇΩ")
    print(f"    üöÄ ROI: {roi:.2f}x")
    print(f"    ‚è≥ –û–ö–£–ü–ê–ï–ú–û–°–¢–¨: {payback_months:.1f} –º–µ—Å—è—Ü–µ–≤")
    
    return {
        'name': name,
        'hires_year': hires_year,
        'checks_year': checks_year,
        'labor': labor,
        'speed': speed,
        'accuracy': accuracy,
        'gross': gross,
        'platform': platform,
        'net': net,
        'roi': roi,
        'payback': payback_months,
        'labor_share': labor / gross * 100 if gross > 0 else 0,
        'speed_share': speed / gross * 100 if gross > 0 else 0,
        'accuracy_share': accuracy / gross * 100 if gross > 0 else 0,
    }


def validate_formulas():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—É–ª —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏."""
    print_header("–í–ê–õ–ò–î–ê–¶–ò–Ø –§–û–†–ú–£–õ")
    
    params = default()
    results = calculate_economics(**params)
    
    print_subheader("1. –≠–ö–û–ù–û–ú–ò–Ø –ù–ê –¢–†–£–î–ï")
    hires_year = params['hires_per_month'] * 12
    checks_year = hires_year * params['checks_per_hire']
    
    manual_cost_per_check = (params['eng_hourly'] * params['eng_hours_per_cand_manual'] + 
                             params['rec_hourly'] * params['rec_hours_per_cand_manual'])
    unicheck_cost_per_check = (params['eng_hourly'] * params['eng_hours_per_cand_unicheck'] + 
                               params['rec_hourly'] * params['rec_hours_per_cand_unicheck'])
    expected_labor = (manual_cost_per_check - unicheck_cost_per_check) * checks_year
    
    print(f"    –§–æ—Ä–º—É–ª–∞: (manual_cost - unicheck_cost) √ó checks_year")
    print(f"    Manual cost/check: {manual_cost_per_check:,.0f} ‚ÇΩ")
    print(f"      = {params['eng_hourly']:,}*{params['eng_hours_per_cand_manual']} + {params['rec_hourly']:,}*{params['rec_hours_per_cand_manual']}")
    print(f"    UniCheck cost/check: {unicheck_cost_per_check:,.0f} ‚ÇΩ")
    print(f"      = {params['eng_hourly']:,}*{params['eng_hours_per_cand_unicheck']} + {params['rec_hourly']:,}*{params['rec_hours_per_cand_unicheck']}")
    print(f"    Expected: ({manual_cost_per_check:,.0f} - {unicheck_cost_per_check:,.0f}) √ó {checks_year:,} = {expected_labor:,.0f} ‚ÇΩ")
    print(f"    Actual: {results['labor_savings']:,.0f} ‚ÇΩ")
    print(f"    ‚úÖ MATCH: {abs(expected_labor - results['labor_savings']) < 1}")
    
    print_subheader("2. –≠–ö–û–ù–û–ú–ò–Ø –ù–ê –°–ö–û–†–û–°–¢–ò")
    tth_manual = params['time_to_test_start_manual_days'] + params['time_to_test_finish_manual_days']
    tth_unicheck = params['time_to_test_start_unicheck_days'] + params['time_to_test_finish_unicheck_days']
    delta_tth = tth_manual - tth_unicheck
    expected_speed = hires_year * delta_tth * params['vacancy_cost_per_day']
    
    print(f"    –§–æ—Ä–º—É–ª–∞: hires_year √ó delta_tth_days √ó vacancy_cost_per_day")
    print(f"    TtH Manual: {tth_manual} –¥–Ω–µ–π")
    print(f"    TtH UniCheck: {tth_unicheck} –¥–Ω–µ–π")
    print(f"    Delta: {delta_tth} –¥–Ω–µ–π")
    print(f"    Expected: {hires_year:,} √ó {delta_tth} √ó {params['vacancy_cost_per_day']:,} = {expected_speed:,.0f} ‚ÇΩ")
    print(f"    Actual: {results['speed_savings']:,.0f} ‚ÇΩ")
    print(f"    ‚úÖ MATCH: {abs(expected_speed - results['speed_savings']) < 1}")
    
    print_subheader("3. –≠–ö–û–ù–û–ú–ò–Ø –ù–ê –¢–û–ß–ù–û–°–¢–ò")
    avoided_bad = hires_year * (params['bad_hire_rate_manual_pct'] - params['bad_hire_rate_unicheck_pct']) / 100
    expected_accuracy = avoided_bad * params['cost_bad_hire']
    
    print(f"    –§–æ—Ä–º—É–ª–∞: hires_year √ó (bad_rate_manual - bad_rate_unicheck) √ó cost_bad_hire")
    print(f"    Avoided bad hires: {hires_year:,} √ó ({params['bad_hire_rate_manual_pct']}% - {params['bad_hire_rate_unicheck_pct']}%) = {avoided_bad:.1f}")
    print(f"    Expected: {avoided_bad:.1f} √ó {params['cost_bad_hire']:,} = {expected_accuracy:,.0f} ‚ÇΩ")
    print(f"    Actual: {results['accuracy_savings']:,.0f} ‚ÇΩ")
    print(f"    ‚úÖ MATCH: {abs(expected_accuracy - results['accuracy_savings']) < 1}")
    
    print_subheader("4. –ü–õ–ê–¢–§–û–†–ú–ê –ò ROI")
    platform_expected = checks_year * params['price_per_check']
    gross_expected = expected_labor + expected_speed + expected_accuracy
    net_expected = gross_expected - platform_expected
    roi_expected = net_expected / platform_expected if platform_expected > 0 else None
    
    print(f"    Platform cost: {checks_year:,} √ó {params['price_per_check']} = {platform_expected:,.0f} ‚ÇΩ")
    print(f"    Gross: {expected_labor:,.0f} + {expected_speed:,.0f} + {expected_accuracy:,.0f} = {gross_expected:,.0f} ‚ÇΩ")
    print(f"    Net: {gross_expected:,.0f} - {platform_expected:,.0f} = {net_expected:,.0f} ‚ÇΩ")
    print(f"    ROI: {net_expected:,.0f} / {platform_expected:,.0f} = {roi_expected:.2f}x")
    print(f"\n    Actual gross: {results['gross_savings']:,.0f} ‚ÇΩ")
    print(f"    Actual platform: {results['platform_cost']:,.0f} ‚ÇΩ")
    print(f"    Actual net: {results['net_savings']:,.0f} ‚ÇΩ")
    print(f"    Actual ROI: {results['roi']:.2f}x")
    print(f"\n    ‚úÖ ALL FORMULAS VERIFIED")


def analyze_all_presets():
    """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤."""
    print_header("–ê–ù–ê–õ–ò–ó –í–°–ï–• –ü–†–ï–°–ï–¢–û–í")
    
    results_list = []
    for name, preset_func in [('default', default), ('bank', bank), ('retail', retail), ('smb', smb)]:
        result = analyze_preset(name, preset_func)
        results_list.append(result)
    
    # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    print_header("–°–í–û–î–ö–ê –ü–û –í–°–ï–ú –ü–†–ï–°–ï–¢–ê–ú")
    
    print(f"\n  {'–ü—Ä–µ—Å–µ—Ç':<12} {'ROI':<10} {'–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å':<15} {'–°–∫–æ—Ä–æ—Å—Ç—å %':<15} {'–¢–æ—á–Ω–æ—Å—Ç—å %':<15}")
    print(f"  {'-'*12} {'-'*10} {'-'*15} {'-'*15} {'-'*15}")
    for r in results_list:
        print(f"  {r['name']:<12} {r['roi']:<10.2f}x {r['payback']:<15.1f}–º–µ—Å {r['speed_share']:<15.1f}% {r['accuracy_share']:<15.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    print_header("–≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ê–Ø –û–ë–û–°–ù–û–í–ê–ù–ù–û–°–¢–¨")
    
    valid = True
    for r in results_list:
        print(f"\n  ‚úì {r['name'].upper()}:")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: ROI —Ä–∞–∑—É–º–Ω—ã–π (10-50x - –ø—Ä–∏–µ–º–ª–µ–º–æ)
        roi_ok = 10 <= r['roi'] <= 50
        print(f"    ROI {r['roi']:.1f}x: {'‚úÖ –•–û–†–û–®–û' if roi_ok else '‚ö†Ô∏è –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å < 6 –º–µ—Å—è—Ü–µ–≤
        payback_ok = r['payback'] <= 6
        print(f"    –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å {r['payback']:.1f} –º–µ—Å: {'‚úÖ –•–û–†–û–®–û' if payback_ok else '‚ö†Ô∏è –î–û–õ–ì–û'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–∑—É–º–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
        speed_dom = r['speed_share'] > 70
        speed_note = "‚ö†Ô∏è –°–ö–û–†–û–°–¢–¨ –î–û–ú–ò–ù–ò–†–£–ï–¢" if speed_dom else "‚úÖ –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–û"
        print(f"    –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {r['labor_share']:.0f}% —Ç—Ä—É–¥, {r['speed_share']:.0f}% —Å–∫–æ—Ä–æ—Å—Ç—å, {r['accuracy_share']:.0f}% —Ç–æ—á–Ω–æ—Å—Ç—å - {speed_note}")
        
        if not (roi_ok and payback_ok):
            valid = False
    
    if valid:
        print("\n  ‚úÖ –í–°–ï –ü–†–ï–°–ï–¢–´ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò –û–ë–û–°–ù–û–í–ê–ù–´")
    else:
        print("\n  ‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –ü–†–ï–°–ï–¢–´ –¢–†–ï–ë–£–Æ–¢ –í–ù–ò–ú–ê–ù–ò–Ø")


def sensitivity_analysis():
    """–ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    print_header("–ê–ù–ê–õ–ò–ó –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    
    params = default()
    base_result = calculate_economics(**params)
    base_roi = base_result['roi']
    
    print_subheader("–í–õ–ò–Ø–ù–ò–ï –°–¢–û–ò–ú–û–°–¢–ò –í–ê–ö–ê–ù–°–ò–ò")
    for vacancy_pct in [-30, -15, 0, 15, 30]:
        params_copy = default()
        params_copy['vacancy_cost_per_day'] = int(params['vacancy_cost_per_day'] * (1 + vacancy_pct/100))
        result = calculate_economics(**params_copy)
        delta = (result['roi'] - base_roi) / base_roi * 100
        print(f"    {vacancy_pct:+3d}% ({params_copy['vacancy_cost_per_day']:,} ‚ÇΩ/–¥–µ–Ω—å): ROI {result['roi']:.2f}x ({delta:+.0f}%)")
    
    print_subheader("–í–õ–ò–Ø–ù–ò–ï –°–û–ö–†–ê–©–ï–ù–ò–Ø TtH")
    for tth_delta in [-2, -1, 0, 1, 2]:
        params_copy = default()
        params_copy['time_to_test_finish_manual_days'] = params['time_to_test_finish_manual_days'] + tth_delta
        result = calculate_economics(**params_copy)
        delta = (result['roi'] - base_roi) / base_roi * 100
        actual_tth = (params_copy['time_to_test_start_manual_days'] + params_copy['time_to_test_finish_manual_days']) - (params_copy['time_to_test_start_unicheck_days'] + params_copy['time_to_test_finish_unicheck_days'])
        print(f"    TtH {actual_tth:+2d} –¥–Ω–µ–π: ROI {result['roi']:.2f}x ({delta:+.0f}%)")
    
    print_subheader("–í–õ–ò–Ø–ù–ò–ï –°–¢–û–ò–ú–û–°–¢–ò –û–®–ò–ë–ö–ò –ù–ê–ô–ú–ê")
    for cost_pct in [-30, -15, 0, 15, 30]:
        params_copy = default()
        params_copy['cost_bad_hire'] = int(params['cost_bad_hire'] * (1 + cost_pct/100))
        result = calculate_economics(**params_copy)
        delta = (result['roi'] - base_roi) / base_roi * 100
        print(f"    {cost_pct:+3d}% ({params_copy['cost_bad_hire']:,} ‚ÇΩ): ROI {result['roi']:.2f}x ({delta:+.0f}%)")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if len(sys.argv) > 1:
        if '--detailed' in sys.argv:
            validate_formulas()
        if '--sensitivity' in sys.argv:
            sensitivity_analysis()
        if '--all' in sys.argv or len(sys.argv) == 1:
            analyze_all_presets()
    else:
        analyze_all_presets()
        print("\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:")
        print("    python validate.py --detailed     # –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—É–ª")
        print("    python validate.py --sensitivity  # –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("    python validate.py --all          # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑")


if __name__ == '__main__':
    main()
